set shell=/bin/sh

" set no compatible mode
set nocompatible
set mouse=a
if !has('nvim')
	set ttymouse=xterm2
endif

set hlsearch
if !has('nvim')
	syntax on
endif
set hidden

" remap the leader key
nnoremap <space> <nop>
let mapleader = " "

if !has('nvim')
	map <leader>r :source ~/.vimrc<CR>
endif

nmap <leader>e :edit ./
nmap <leader>E :edit ~/

" SCROLLING
nmap <C-up> <C-y>
nmap <C-down> <C-e>
" nmap <S-w> :for i in range(1,10) \| :eval(feedkeys("\<C-e>")) \| endfor<CR>
nmap <S-w> <C-y>
nmap <S-s> <C-e>

" BUFFERS
nmap <tab> :b 
nmap <leader>v<tab> :vertical sb 
nmap <leader>h<tab> :split b 

" string replace
nnoremap <leader>R yiw:%s/\<<C-r>"\>//g<left><left>


if !has('nvim')
	" always display the statusline
	set laststatus=2

	set statusline=
	set statusline+=%#StatusLine#
	set statusline+=%F
	set statusline+=\ %=
	set statusline+=\ %y
	set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
	set statusline+=\ \[%{&fileformat}\]
	set statusline+=\ %p%%
	set statusline+=\ %lL:%cC
	set statusline+=\
endif


" enable hybrid line numbering
set number relativenumber
highlight CursorLineNr ctermfg=DarkGreen

" set the number of spaces that a tab counts for while performing editing operations
:set tabstop=4
:set softtabstop=4

" set the number of spaces to use for each step of (auto)indent
:set shiftwidth=4

" don't expand tabs to spaces
:set noexpandtab

" enable automatic indentation, copying indentation from the previous line
" when starting a new line
:set autoindent

" indent word-wrapped lines by the same amount as the parent line
:set breakindent

" when in insert mode, exit it using 'ii'
" :imap ii <Esc>

" enable file type recognition using a builtin plugin
filetype plugin on
" search down the directory tree set path+=**

" during command-line completion, display all matches upon tab-completion
set wildmenu

" create a 'tags' file for ctags
command! Maketags !ctags -R .

" ctags jump to definition under the cursor
":nnoremap <S-Right> <C-]>

" ctags climb back up the tag stack
":nnoremap <S-Left> <C-t>

" display keystrokes in the status line as they are entered
:set showcmd

" tab navigation
" :nnoremap <S-H> :tabprevious<CR>
" :nnoremap <S-L> :tabnext<CR>

" split navigation
:nnoremap <C-H> <C-W><C-H>
:nnoremap <C-J> <C-W><C-J>
:nnoremap <C-K> <C-W><C-K>
:nnoremap <C-L> <C-W><C-L>

" open splits below and to the right
set splitbelow
set splitright



if !has('nvim')
	" automatically install junegunn's vim-plug
	let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
	if empty(glob(data_dir . '/autoload/plug.vim'))
		silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
		autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	endif


	set ttymouse=xterm2
	" enable plugins
	call plug#begin()
	Plug 'preservim/NERDTree'
	" Plug 'tpope/vim-obsession'
	Plug 'jlanzarotta/bufexplorer'
	Plug 'vim-scripts/Smooth-Scroll'
	" Plug 'karolbelina/uxntal.vim'
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings'
	Plug 'prabirshrestha/asyncomplete.vim'
	Plug 'prabirshrestha/asyncomplete-lsp.vim'
	call plug#end()

	let g:scroll_factor = 7500
	set scroll=4

	inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
	inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
	inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

	let g:asyncomplete_auto_popup = 1

	" allow modifying the completeopt variable, or it will
	" be overridden all the time
	let g:asyncomplete_auto_completeopt = 0
	set completeopt=menuone,noinsert,noselect,preview

	:highlight Pmenu		ctermbg=8	ctermfg=15 guibg=gray
	:highlight PmenuSel		ctermbg=0	ctermfg=15 
	:highlight PmenuSbar	ctermbg=6	ctermfg=15 guibg=gray
	:highlight PmenuThumb	ctermbg=14	ctermfg=15 guibg=gray

	:highlight SignColumn	term=standout	ctermfg=4	ctermbg=0 guifg=DarkBlue guibg=Grey
	:highlight CursorColumn	term=reverse	ctermbg=14	guibg=Grey90


	nmap <buffer> gd <plug>(lsp-definition)
endif

:set signcolumn=yes

" NERDTree mappings
" :nnoremap <leader><tab> :NERDTreeFocus<CR>
" :nnoremap <leader>t :NERDTreeToggle<CR>
" let NERDTreeShowHidden=1

" NERDTree UI changes
" let NERDTreeMinimalUI = 1
" let NERDTreeDirArrows = 1
" let g:NERDTreeWinSize = 26

" use U+2502 as the vertical fill character
set fillchars+=vert:â”‚

" change vertical split highlight
hi VertSplit cterm=NONE


" word wrapping
let s:wrapenabled = 0
function! ToggleWrap()
    set wrap nolist
    if s:wrapenabled
	set nolinebreak
	unmap j
	unmap k
	unmap 0
	unmap $
	unmap ^
	unmap <Down>
	unmap <Up>
	let s:wrapenabled = 0
    else
	set linebreak
	nnoremap j gj
	nnoremap k gk
	nnoremap 0 g0
	nnoremap $ g$
	nnoremap ^ g^
	nnoremap <Down> g<Down>
	nnoremap <Up> g<Up>
	vnoremap j gj
	vnoremap k gk
	vnoremap 0 g0
	vnoremap $ g$
	vnoremap ^ g^
	vnoremap <Down> g<Down>
	vnoremap <Up> g<Up>
	inoremap <Down> <C-o>gj
	inoremap <Up> <C-o>gk
	let s:wrapenabled = 1
    endif
endfunction



" mapping to toggle word wrapping
map <leader>w :call ToggleWrap()<CR>
" start in the special word wrapping mode by default
:call ToggleWrap()

" disable/unlink italic highlighting in markdown
:highlight link markdownItalic NONE

